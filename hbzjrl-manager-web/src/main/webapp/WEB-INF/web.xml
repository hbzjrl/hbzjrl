<!DOCTYPE web-app PUBLIC
 "-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN"
 "http://java.sun.com/dtd/web-app_2_3.dtd" >

<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
         version="4.0">

  <!--  可以配置页面访问路径比如WEB-INF下面的login.jsp-->
  <welcome-file-list>
    <welcome-file>/index.html</welcome-file>
    <welcome-file>/index.htm</welcome-file>
    <!--    <welcome-file>/WEB-INF/jsp/login.html</welcome-file>-->
    <welcome-file>/WEB-INF/jsp/index.jsp</welcome-file>
    <welcome-file>/WEB-INF/jsp/login.jsp</welcome-file>
    <welcome-file>/login.html</welcome-file>
    <welcome-file>/login.jsp</welcome-file>
    <welcome-file>/index.jsp</welcome-file>
    <welcome-file>/default.html</welcome-file>
    <welcome-file>/default.htm</welcome-file>
    <welcome-file>/default.jsp</welcome-file>

  </welcome-file-list>
  <!--  web.xml详解  https://blog.csdn.net/believejava/article/details/43229361-->
  <!--web项目会首先读取context-param和listener节点-->
  <display-name>Archetype Created Web Application</display-name>
  <context-param>
    <param-name>contextConfigLocation</param-name>
    <param-value>
      classpath:spring/applicationContext-*.xml
    </param-value>
  </context-param>
  <!--  加载spring容器-->
  <listener>
    <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
  </listener>
  <!--    紧接着,创建一个容器ServletContext(Application),在web项目所有部分共享这个上下文-->
  <!--    接着，容器会读取<filter></filter>，根据指定的类路径来实例化过滤器。-->
  <!--  解决乱码问题-->
  <filter>
    <filter-name>CharacterEncodingFilter</filter-name>
    <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
    <init-param>
      <param-name>encoding</param-name>
      <param-value>utf-8</param-value>
    </init-param>
    <init-param>
      <param-name>ForceEncoding</param-name>
      <param-value>true</param-value>
    </init-param>
  </filter>
  <filter-mapping>
    <filter-name>CharacterEncodingFilter</filter-name>
    <url-pattern>*.html</url-pattern>
  </filter-mapping>

  <filter-mapping>
    <filter-name>CharacterEncodingFilter</filter-name>
    <url-pattern>/*</url-pattern>
  </filter-mapping>

  <!--    springmvc前端控制器-->
  <servlet>
    <servlet-name>hbzjrl-manager</servlet-name>
    <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
    <!--  contextConfigLocation不是必须的,如果不配置contextConfigLocation,Springmvc的配置文件默认-->
    <init-param>
      <param-name>contextConfigLocation</param-name>
      <param-value>classpath:spring/springmvc.xml</param-value>
    </init-param>
    <!-- 在web应用程序启动的时候就加载这个servlet，(实例化并调用其init()方法-->
    <load-on-startup>1</load-on-startup>
  </servlet>
  <servlet-mapping>
    <servlet-name>hbzjrl-manager</servlet-name>
    <!--    会拦截所有请求包括静态资源,需要在springmvc.xml中添加静态资源的映射-->
    <url-pattern>/</url-pattern>
  </servlet-mapping>
  <!--万能乱码编辑-->
  <filter>
    <filter-name>EncoidingFilter</filter-name>
    <filter-class>com.hbzjrl.common.EncoidingFilter</filter-class>
    <init-param>
      <param-name>Encoding</param-name>
      <param-value>utf-8</param-value>
    </init-param>
  </filter>
  <filter-mapping>
    <filter-name>EncoidingFilter</filter-name>
    <url-pattern>/*</url-pattern>
  </filter-mapping>



</web-app>
